import os
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes)
import random
import requests

load_dotenv()
TOKEN = os.getenv("TOKEN_BOT_TELEGRAM")

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

CITIES = {
    "–º–æ—Å–∫–≤–∞": (55.75, 37.61),
    "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥": (59.93, 30.31),
    "–±—Ä–∞—Ç—Å–∫": (56.15, 101.63),
    "–∫–∏–µ–≤": (50.45, 30.52),
    "–º–∏–Ω—Å–∫": (53.90, 27.56),
    "–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": (55.03, 82.92)
}


def get_weather(city: str) -> dict:
    city = city.lower().strip()
    if city not in CITIES:
        return {"error": "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"}
    latitude, longitude = CITIES[city]
    url = (
        f"https://api.open-meteo.com/v1/forecast?"
        f"latitude={latitude}&longitude={longitude}"
        f"&current_weather=true"
        f"&daily=temperature_2m_max,temperature_2m_min,precipitation_sum"
        f"&timezone=auto"
    )
    try:
        response = requests.get(url)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as err:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {err}")
        return {"error": "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞"}


def format_weather(data: dict) -> str:
    if "error" in data:
        return data["error"]

    current_weather = ""
    reaction = ""
    if "current_weather" in data:
        temp_now = data["current_weather"]["temperature"]
        wind_now = data["current_weather"]["windspeed"]
        current_weather = (
            f"üåç <b>–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞:</b>\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_now}¬∞C\n"
            f"üí® –í–µ—Ç–µ—Ä: {wind_now} –º/—Å\n\n"
        )
        if temp_now >= 25:
            reaction = random.choice(WEATHER_REPLIES["hot"])
        elif temp_now <= 5:
            reaction = random.choice(WEATHER_REPLIES["cold"])
        elif wind_now > 10:
            reaction = random.choice(WEATHER_REPLIES["windy"])
        else:
            reaction = random.choice(WEATHER_REPLIES["normal"])
    else:
        current_weather = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ.\n\n"

    forecast_text = ""
    if "daily" in data:
        daily = data["daily"]
        temp_max = daily["temperature_2m_max"][:7]
        temp_min = daily["temperature_2m_min"][:7]
        rain = daily["precipitation_sum"][:7]
        dates = daily["time"][:7]
        forecast_text = "üìÖ <b>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é:</b>\n"
        for i in range(7):
            forecast_text += (
                f"{dates[i]}: üå° {temp_min[i]}¬∞C - {temp_max[i]}¬∞C, "
                f"‚òî –û—Å–∞–¥–∫–∏: {rain[i]} –º–º\n"
            )
    return f"{current_weather}{reaction}\n\n{forecast_text}"


WEATHER_REPLIES = {
    "hot": [
        "–ñ–∞—Ä–∫–æ–≤–∞—Ç–æ! –ü–æ—Ä–∞ –¥–æ—Å—Ç–∞–≤–∞—Ç—å –ø–ª–∞–≤–∫–∏ –∏ –∏—Å–∫–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–π –±–∞—Å—Å–µ–π–Ω! üèñ",
        "–°–æ–ª–Ω—Ü–µ –∂–∂–µ—Ç! –ù–µ –∑–∞–±—É–¥—å –∑–∞—â–∏—Ç–Ω—ã–π –∫—Ä–µ–º, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –∫–∞—Ä—Ç–æ—à–∫—É-—Ñ—Ä–∏. üåû",
        "–ù–∞—Å—Ç–æ—è—â–∞—è –¥—É—Ö–æ—Ç–∞! –ú–æ–∂–µ—Ç, –ª—É—á—à–µ —Å–ø—Ä—è—Ç–∞—Ç—å—Å—è –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ? ‚ùÑÔ∏è"
    ],
    "cold": [
        "–•–æ–ª–æ–¥–Ω–æ, –∫–∞–∫ –≤ —Å–µ—Ä–¥—Ü–µ —Ç–≤–æ–µ–≥–æ –±—ã–≤—à–µ–≥–æ! üßä",
        "–ú–∏–Ω—É—Å –Ω–∞ —É–ª–∏—Ü–µ, –ø–ª—é—Å –∫ –∂–µ–ª–∞–Ω–∏—é —Å–∏–¥–µ—Ç—å –¥–æ–º–∞ –ø–æ–¥ –ø–ª–µ–¥–æ–º! ü•∂",
        "–ì–¥–µ —Ç–≤–æ–π —Ç–µ–ø–ª—ã–π —á–∞–π –∏ —Ç–æ–ª—Å—Ç—ã–π —Å–≤–∏—Ç–µ—Ä? –°–µ–π—á–∞—Å —Å–∞–º–æ–µ –≤—Ä–µ–º—è! üçµ"
    ],
    "windy": [
        "–í–µ—Ç–µ—Ä —Ç–∞–∫–æ–π, —á—Ç–æ –º–æ–∂–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏—Å–ø—ã—Ç–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –ø–∞—Ä–∞—à—é—Ç–∞! üí®",
        "–ü–æ—Ä–∞ –ø—Ä–∏–≤—è–∑—ã–≤–∞—Ç—å —à–∞–ø–∫—É, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ —É–ª–µ—Ç–µ–ª–∞ –≤ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥! üé©",
        "–•–æ—á–µ—à—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —É–∫–ª–∞–¥–∫—É? –ü—Ä–æ—Å—Ç–æ –≤—ã–π–¥–∏ –Ω–∞ —É–ª–∏—Ü—É! üå™"
    ],
    "normal": [
        "–ü–æ–≥–æ–¥–∞ –≤—Ä–æ–¥–µ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è! –ú–æ–∂–Ω–æ —Å–ø–æ–∫–æ–π–Ω–æ –≥—É–ª—è—Ç—å. üòé",
        "–°–µ–≥–æ–¥–Ω—è –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –Ω–µ –ø–∞—Ä–∏—Ç—å—Å—è –æ –ø–æ–≥–æ–¥–µ! üòè",
        "–í—Å—ë —Å–ø–æ–∫–æ–π–Ω–æ! –î–∞–∂–µ —Å–∏–Ω–æ–ø—Ç–∏–∫–∏ –Ω–µ –∂–∞–ª—É—é—Ç—Å—è. üòÜ"
    ]
}


async def universal_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    msg = update.effective_message
    if not msg:
        msg = update.channel_post
    if not msg or not msg.text:
        return

    logging.info("–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", msg.text)
    city = msg.text.lower().strip()
    if city in CITIES:
        weather_data = get_weather(city)
        weather_text = format_weather(weather_data)
        await msg.reply_text(weather_text, parse_mode="HTML")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.effective_message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞: " + ", ".join(CITIES.keys()),
        parse_mode="HTML"
    )


async def all(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat = update.effective_chat
    try:
        admins = await chat.get_administrators()
        mention_list = []
        for admin in admins:
            user = admin.user
            if user.id == context.bot.id:
                continue
            if user.username:
                mention_list.append(f"@{user.username}")
            else:
                mention_list.append(f'<a href="tg://user?id={user.id}">{user.first_name}</a>')
        mention_text = " ".join(mention_list)
        await update.effective_message.reply_text(mention_text, parse_mode="HTML")
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: %s", e)
        await update.effective_message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.")


if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("all", all))
    app.add_handler(MessageHandler(filters.TEXT, universal_message_handler))
    app.run_polling()
